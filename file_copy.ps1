# Prompt the user to enter the path to the Git repository
try {

    $originalWorkingDir = (Get-Location).Path
    Write-Warning  "PWD: $originalWorkingDir"

    # Prompt the user to enter the path to the Git repository
    # $repoPath = 'D:\Big\My Work_Local\Coding\test_git'
    $repoPath = Read-Host "Enter the path to the Git repository"
    $repoPath = $repoPath.Trim()

    if (-not (Test-Path -Path (Join-Path $repoPath ".git"))) {
        throw "The specified path is not a valid Git repository."
    }

    # Change the working directory to the specified Git repository path
    
    Set-Location -Path $repoPath

    # Get the last commit ID
    $lastCommitId = git rev-parse HEAD

    # Prompt the user to enter the commit ID
    $commitId = Read-Host "Enter the commit ID (default: $($lastCommitId.Substring(0, 7)) )"
    $commitId = $commitId.Trim()

    # If no commit ID is provided, use the last commit ID
    if ([string]::IsNullOrWhiteSpace($commitId)) {
        $commitId = $lastCommitId
    }


    # Run 'git diff-tree --no-commit-id --name-only -r <commit_id>' command and store the output
    $gitOutput = git diff-tree --no-commit-id --name-only -r $commitId
    Write-Host $gitOutput


    # Split the output into separate lines
    $lines = $gitOutput -split '\r?\n'

    Write-Host "-----------files change----------"
    foreach ($line in $lines) {
        if (![string]::IsNullOrWhiteSpace($line)) {
            Write-Host $line
        }
    }
    Write-Host "---------------------------------"

    $defaultFolderName = "FolderFileChanges." + $commitId.Substring(0, 7)
    $newFolderName = Read-Host "Enter the Folder Name (default: $defaultFolderName)"

    if ([string]::IsNullOrWhiteSpace($newFolderName)) {
        $newFolderName = $defaultFolderName
    }


    # Prompt the user to enter the destination folder path or use the original PowerShell working directory as the default
    $destinationFolder = Read-Host "Enter the destination New folder path (default: $($originalWorkingDir + '\' + $newFolderName))"
    $destinationFolder = $destinationFolder.Trim()

    # If no destination folder path is provided, use the original PowerShell working directory
    if ([string]::IsNullOrWhiteSpace($destinationFolder)) {
        $destinationFolder = Join-Path $originalWorkingDir $newFolderName
    }

    # Iterate through the lines and copy the files to the destination folder with the same path

        foreach ($line in $lines) {
            $line = $line.Trim()
            $sourceFile = Join-Path $repoPath $line
            $destinationFile = Join-Path $destinationFolder $line
            $destinationFileDirectory = Split-Path $destinationFile -Parent

            # Create the destination directory if it doesn't exist
            if (-not (Test-Path -Path $destinationFileDirectory)) {
                New-Item -ItemType Directory -Force -Path $destinationFileDirectory | Out-Null
            }

            # Copy the file to the destination folder
            Copy-Item -Path $sourceFile -Destination $destinationFile -Force -ErrorAction Stop
        }

        # Create README.txt and add a message
        $readmeFilePath = Join-Path $destinationFolder "README.txt"

        # Set the culture to en-US
        $culture = [System.Globalization.CultureInfo]::CreateSpecificCulture("en-US")
        [System.Threading.Thread]::CurrentThread.CurrentCulture = $culture

        # Get the current date and format it
        $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

        # Create the message with the formatted date
        $message = "This folder was generated by a PowerShell script on $timestamp."

        try {
            Set-Content -Path $readmeFilePath -Value $message -ErrorAction Stop
            Write-Host "README.txt created successfully."
        }
        catch {
            Write-Warning "Error creating README.txt: $_"
        }

        Write-Host "File copying completed successfully."

} catch {
        Write-Warning "Error copying file: $line"
        Write-Warning "An error occurred during processing:"
        Write-Warning $_.Exception.Message

} finally  {



        Set-Location -Path $originalWorkingDir

        # Clear variables
        $originalWorkingDir = $null
        $repoPath = $null
        $lastCommitId = $null
        $commitId = $null
        $gitOutput = $null
        $lines = $null
        $defaultFolderName = $null
        $newFolderName = $null
        $destinationFolder = $null
        $sourceFile = $null
        $destinationFile = $null
        $message = $null
        $destinationFileDirectory = $null
        $readmeFilePath = $null
        $timestamp = $null

}


