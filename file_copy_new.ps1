function Get-ChangedFiles {
    param ($repoPath, $commitId)

    Set-Location -Path $repoPath
    $gitOutput = git diff-tree --no-commit-id --name-only -r $commitId
    return $gitOutput -split '\r?\n'
}

function Copy-FilesToDestination {
    param ($files, $repoPath, $destinationFolder)

    foreach ($line in $files) {
        $line = $line.Trim()
        $sourceFile = Join-Path $repoPath $line
        $destinationFile = Join-Path $destinationFolder $line

        if (Test-Path -Path $destinationFile) {
            $overwrite = Read-Host "$destinationFile already exists. Overwrite? (Y/N)"
            if ($overwrite -ne 'Y') {
                continue
            }
        }

        $destinationFileDirectory = Split-Path $destinationFile -Parent

        if (-not (Test-Path -Path $destinationFileDirectory)) {
            New-Item -ItemType Directory -Force -Path $destinationFileDirectory | Out-Null
        }

        Copy-Item -Path $sourceFile -Destination $destinationFile -Force -ErrorAction Stop
    }
}

function Create-Readme {
    param ($destinationFolder, $repoPath, $commitId, $lines, $timestamp)

    # Add a bullet point to each line
    $bulletedLines = $lines | ForEach-Object { "- $_" }

    $message = 
    @"
This folder was generated by a PowerShell script on $timestamp.
Repository Path: $repoPath
Commit ID: $commitId
Copied Files:
$($bulletedLines -join "`n")
"@

    Set-Content -Path (Join-Path $destinationFolder "README.txt") -Value $message -ErrorAction Stop
}


try {
    $originalWorkingDir = (Get-Location).Path
    Write-Warning  "PWD: $originalWorkingDir"

    $repoPath = Read-Host "Enter the path to the Git repository"
    $repoPath = $repoPath.Trim()

    if (-not (Test-Path -Path (Join-Path $repoPath ".git"))) {
        throw "The specified path is not a valid Git repository."
    }

    Set-Location -Path $repoPath

    $lastCommitId = git rev-parse HEAD
    $commitId = Read-Host "Enter the commit ID (default: $($lastCommitId.Substring(0, 7)))"
    $commitId = $commitId.Trim()

    if ([string]::IsNullOrWhiteSpace($commitId)) {
        $commitId = $lastCommitId
    }

    $lines = Get-ChangedFiles -repoPath $repoPath -commitId $commitId

    $defaultFolderName = "FolderFileChanges." + $commitId.Substring(0, 7)
    $newFolderName = Read-Host "Enter the Folder Name (default: $defaultFolderName)"
    if ([string]::IsNullOrWhiteSpace($newFolderName)) {
        $newFolderName = $defaultFolderName
    }

    $destinationFolder = Read-Host "Enter the destination New folder path (default: $($originalWorkingDir + '\' + $newFolderName))"
    $destinationFolder = $destinationFolder.Trim()

    if ([string]::IsNullOrWhiteSpace($destinationFolder)) {
        $destinationFolder = Join-Path $originalWorkingDir $newFolderName
    }

    Copy-FilesToDestination -files $lines -repoPath $repoPath -destinationFolder $destinationFolder

    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Create-Readme -destinationFolder $destinationFolder -repoPath $repoPath -commitId $commitId -lines $lines -timestamp $timestamp
}
catch {
    Write-Warning "An error occurred during processing:"
    Write-Warning $_.Exception.Message
}
finally {
    Set-Location -Path $originalWorkingDir
}

